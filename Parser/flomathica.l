/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
extern int yy_mylinenumber ;

/* BEGIN extensible string buffer */

#include "Buffer.H"

/* The initial size of the buffer to lex string literals. */
#define LITERAL_BUFFER_INITIAL_SIZE 1024

/* The pointer to the literal buffer. */
static Buffer literal_buffer = NULL;

/* Initialize the literal buffer. */
#define LITERAL_BUFFER_CREATE() literal_buffer = newBuffer(LITERAL_BUFFER_INITIAL_SIZE)

/* Append characters at the end of the buffer. */
#define LITERAL_BUFFER_APPEND(s) bufferAppendString(literal_buffer, s)

/* Append a character at the end of the buffer. */
#define LITERAL_BUFFER_APPEND_CHAR(c) bufferAppendChar(literal_buffer, c)

/* Release the buffer, returning a pointer to its content. */
#define LITERAL_BUFFER_HARVEST() releaseBuffer(literal_buffer)

/* In exceptional cases, e.g. when reaching EOF, we have to free the buffer. */
#define LITERAL_BUFFER_FREE() freeBuffer(literal_buffer)

/* END extensible string buffer */

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL CHAR CHARESC CHAREND STRING ESCAPED

%%  /* Rules. */

<YYINITIAL>"("      	 return _SYMB_0;
<YYINITIAL>")"      	 return _SYMB_1;
<YYINITIAL>"!"      	 return _SYMB_2;
<YYINITIAL>","      	 return _SYMB_3;
<YYINITIAL>"?"      	 return _SYMB_4;
<YYINITIAL>"$"      	 return _SYMB_5;
<YYINITIAL>"="      	 return _SYMB_6;
<YYINITIAL>"-"      	 return _SYMB_7;
<YYINITIAL>"*"      	 return _SYMB_8;
<YYINITIAL>"/"      	 return _SYMB_9;
<YYINITIAL>"+"      	 return _SYMB_10;
<YYINITIAL>"<"      	 return _SYMB_11;
<YYINITIAL>">"      	 return _SYMB_12;
<YYINITIAL>"<="      	 return _SYMB_13;
<YYINITIAL>">="      	 return _SYMB_14;
<YYINITIAL>"=="      	 return _SYMB_15;
<YYINITIAL>"!="      	 return _SYMB_16;
<YYINITIAL>"%"      	 return _SYMB_17;
<YYINITIAL>"def"      	 return _SYMB_18;
<YYINITIAL>"else"      	 return _SYMB_19;
<YYINITIAL>"if"      	 return _SYMB_20;
<YYINITIAL>"operator"      	 return _SYMB_21;
<YYINITIAL>"then"      	 return _SYMB_22;



<YYINITIAL>{LETTER}(\_|({DIGIT}|{LETTER}))*     	 yylval._string = strdup(yytext); return _SYMB_23;
<YYINITIAL>"\""        	 LITERAL_BUFFER_CREATE(); BEGIN STRING;
<STRING>\\             	 BEGIN ESCAPED;
<STRING>\"             	 yylval._string = LITERAL_BUFFER_HARVEST(); BEGIN YYINITIAL; return _STRING_;
<STRING>.              	 LITERAL_BUFFER_APPEND_CHAR(yytext[0]);
<ESCAPED>n             	 LITERAL_BUFFER_APPEND_CHAR('\n'); BEGIN STRING;
<ESCAPED>\"            	 LITERAL_BUFFER_APPEND_CHAR('"');  BEGIN STRING;
<ESCAPED>\\            	 LITERAL_BUFFER_APPEND_CHAR('\\'); BEGIN STRING;
<ESCAPED>t             	 LITERAL_BUFFER_APPEND_CHAR('\t'); BEGIN STRING;
<ESCAPED>.             	 LITERAL_BUFFER_APPEND(yytext);    BEGIN STRING;
<STRING,ESCAPED><<EOF>>	 LITERAL_BUFFER_FREE(); return _ERROR_;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval._double = atof(yytext); return _DOUBLE_;
<YYINITIAL>{DIGIT}+      	 yylval._int = atoi(yytext); return _INTEGER_;
\n  ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
void initialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

